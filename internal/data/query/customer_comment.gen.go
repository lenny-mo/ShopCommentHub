// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"comment/internal/data/model"
)

func newCustomerComment(db *gorm.DB, opts ...gen.DOOption) customerComment {
	_customerComment := customerComment{}

	_customerComment.customerCommentDo.UseDB(db, opts...)
	_customerComment.customerCommentDo.UseModel(&model.CustomerComment{})

	tableName := _customerComment.customerCommentDo.TableName()
	_customerComment.ALL = field.NewAsterisk(tableName)
	_customerComment.ID = field.NewUint64(tableName, "id")
	_customerComment.CreateAt = field.NewTime(tableName, "create_at")
	_customerComment.UpdateAt = field.NewTime(tableName, "update_at")
	_customerComment.Version = field.NewUint64(tableName, "version")
	_customerComment.CustomerID = field.NewInt64(tableName, "customer_id")
	_customerComment.CommentID = field.NewString(tableName, "comment_id")
	_customerComment.LastCommentID = field.NewString(tableName, "last_comment_id")
	_customerComment.Content = field.NewString(tableName, "content")
	_customerComment.SkuID = field.NewString(tableName, "sku_id")

	_customerComment.fillFieldMap()

	return _customerComment
}

type customerComment struct {
	customerCommentDo customerCommentDo

	ALL           field.Asterisk
	ID            field.Uint64 // 自增主键
	CreateAt      field.Time   // 创建时间
	UpdateAt      field.Time   // 更新时间
	Version       field.Uint64 // 乐观锁
	CustomerID    field.Int64  // 消费者id
	CommentID     field.String // 评论id, uuid
	LastCommentID field.String // 评论id
	Content       field.String // 评价内容
	SkuID         field.String

	fieldMap map[string]field.Expr
}

func (c customerComment) Table(newTableName string) *customerComment {
	c.customerCommentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerComment) As(alias string) *customerComment {
	c.customerCommentDo.DO = *(c.customerCommentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerComment) updateTableName(table string) *customerComment {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.CreateAt = field.NewTime(table, "create_at")
	c.UpdateAt = field.NewTime(table, "update_at")
	c.Version = field.NewUint64(table, "version")
	c.CustomerID = field.NewInt64(table, "customer_id")
	c.CommentID = field.NewString(table, "comment_id")
	c.LastCommentID = field.NewString(table, "last_comment_id")
	c.Content = field.NewString(table, "content")
	c.SkuID = field.NewString(table, "sku_id")

	c.fillFieldMap()

	return c
}

func (c *customerComment) WithContext(ctx context.Context) ICustomerCommentDo {
	return c.customerCommentDo.WithContext(ctx)
}

func (c customerComment) TableName() string { return c.customerCommentDo.TableName() }

func (c customerComment) Alias() string { return c.customerCommentDo.Alias() }

func (c customerComment) Columns(cols ...field.Expr) gen.Columns {
	return c.customerCommentDo.Columns(cols...)
}

func (c *customerComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerComment) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["create_at"] = c.CreateAt
	c.fieldMap["update_at"] = c.UpdateAt
	c.fieldMap["version"] = c.Version
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["comment_id"] = c.CommentID
	c.fieldMap["last_comment_id"] = c.LastCommentID
	c.fieldMap["content"] = c.Content
	c.fieldMap["sku_id"] = c.SkuID
}

func (c customerComment) clone(db *gorm.DB) customerComment {
	c.customerCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerComment) replaceDB(db *gorm.DB) customerComment {
	c.customerCommentDo.ReplaceDB(db)
	return c
}

type customerCommentDo struct{ gen.DO }

type ICustomerCommentDo interface {
	gen.SubQuery
	Debug() ICustomerCommentDo
	WithContext(ctx context.Context) ICustomerCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerCommentDo
	WriteDB() ICustomerCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerCommentDo
	Not(conds ...gen.Condition) ICustomerCommentDo
	Or(conds ...gen.Condition) ICustomerCommentDo
	Select(conds ...field.Expr) ICustomerCommentDo
	Where(conds ...gen.Condition) ICustomerCommentDo
	Order(conds ...field.Expr) ICustomerCommentDo
	Distinct(cols ...field.Expr) ICustomerCommentDo
	Omit(cols ...field.Expr) ICustomerCommentDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerCommentDo
	Group(cols ...field.Expr) ICustomerCommentDo
	Having(conds ...gen.Condition) ICustomerCommentDo
	Limit(limit int) ICustomerCommentDo
	Offset(offset int) ICustomerCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerCommentDo
	Unscoped() ICustomerCommentDo
	Create(values ...*model.CustomerComment) error
	CreateInBatches(values []*model.CustomerComment, batchSize int) error
	Save(values ...*model.CustomerComment) error
	First() (*model.CustomerComment, error)
	Take() (*model.CustomerComment, error)
	Last() (*model.CustomerComment, error)
	Find() ([]*model.CustomerComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerComment, err error)
	FindInBatches(result *[]*model.CustomerComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerCommentDo
	Assign(attrs ...field.AssignExpr) ICustomerCommentDo
	Joins(fields ...field.RelationField) ICustomerCommentDo
	Preload(fields ...field.RelationField) ICustomerCommentDo
	FirstOrInit() (*model.CustomerComment, error)
	FirstOrCreate() (*model.CustomerComment, error)
	FindByPage(offset int, limit int) (result []*model.CustomerComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerCommentDo) Debug() ICustomerCommentDo {
	return c.withDO(c.DO.Debug())
}

func (c customerCommentDo) WithContext(ctx context.Context) ICustomerCommentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerCommentDo) ReadDB() ICustomerCommentDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerCommentDo) WriteDB() ICustomerCommentDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerCommentDo) Session(config *gorm.Session) ICustomerCommentDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerCommentDo) Clauses(conds ...clause.Expression) ICustomerCommentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerCommentDo) Returning(value interface{}, columns ...string) ICustomerCommentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerCommentDo) Not(conds ...gen.Condition) ICustomerCommentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerCommentDo) Or(conds ...gen.Condition) ICustomerCommentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerCommentDo) Select(conds ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerCommentDo) Where(conds ...gen.Condition) ICustomerCommentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerCommentDo) Order(conds ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerCommentDo) Distinct(cols ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerCommentDo) Omit(cols ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerCommentDo) Join(table schema.Tabler, on ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerCommentDo) Group(cols ...field.Expr) ICustomerCommentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerCommentDo) Having(conds ...gen.Condition) ICustomerCommentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerCommentDo) Limit(limit int) ICustomerCommentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerCommentDo) Offset(offset int) ICustomerCommentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerCommentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerCommentDo) Unscoped() ICustomerCommentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerCommentDo) Create(values ...*model.CustomerComment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerCommentDo) CreateInBatches(values []*model.CustomerComment, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerCommentDo) Save(values ...*model.CustomerComment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerCommentDo) First() (*model.CustomerComment, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerComment), nil
	}
}

func (c customerCommentDo) Take() (*model.CustomerComment, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerComment), nil
	}
}

func (c customerCommentDo) Last() (*model.CustomerComment, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerComment), nil
	}
}

func (c customerCommentDo) Find() ([]*model.CustomerComment, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerComment), err
}

func (c customerCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerComment, err error) {
	buf := make([]*model.CustomerComment, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerCommentDo) FindInBatches(result *[]*model.CustomerComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerCommentDo) Attrs(attrs ...field.AssignExpr) ICustomerCommentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerCommentDo) Assign(attrs ...field.AssignExpr) ICustomerCommentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerCommentDo) Joins(fields ...field.RelationField) ICustomerCommentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerCommentDo) Preload(fields ...field.RelationField) ICustomerCommentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerCommentDo) FirstOrInit() (*model.CustomerComment, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerComment), nil
	}
}

func (c customerCommentDo) FirstOrCreate() (*model.CustomerComment, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerComment), nil
	}
}

func (c customerCommentDo) FindByPage(offset int, limit int) (result []*model.CustomerComment, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerCommentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerCommentDo) Delete(models ...*model.CustomerComment) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerCommentDo) withDO(do gen.Dao) *customerCommentDo {
	c.DO = *do.(*gen.DO)
	return c
}
