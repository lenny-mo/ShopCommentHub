// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"comment/internal/data/model"
)

func newMerchantComment(db *gorm.DB, opts ...gen.DOOption) merchantComment {
	_merchantComment := merchantComment{}

	_merchantComment.merchantCommentDo.UseDB(db, opts...)
	_merchantComment.merchantCommentDo.UseModel(&model.MerchantComment{})

	tableName := _merchantComment.merchantCommentDo.TableName()
	_merchantComment.ALL = field.NewAsterisk(tableName)
	_merchantComment.ID = field.NewUint64(tableName, "id")
	_merchantComment.CreateAt = field.NewTime(tableName, "create_at")
	_merchantComment.UpdateAt = field.NewTime(tableName, "update_at")
	_merchantComment.Version = field.NewUint64(tableName, "version")
	_merchantComment.MerchantID = field.NewInt64(tableName, "merchant_id")
	_merchantComment.CommentID = field.NewString(tableName, "comment_id")
	_merchantComment.LastCommentID = field.NewString(tableName, "last_comment_id")
	_merchantComment.Content = field.NewString(tableName, "content")
	_merchantComment.SkuID = field.NewString(tableName, "sku_id")

	_merchantComment.fillFieldMap()

	return _merchantComment
}

type merchantComment struct {
	merchantCommentDo merchantCommentDo

	ALL           field.Asterisk
	ID            field.Uint64 // 自增主键
	CreateAt      field.Time   // 创建时间
	UpdateAt      field.Time   // 更新时间
	Version       field.Uint64 // 乐观锁
	MerchantID    field.Int64  // 商家id
	CommentID     field.String // 评论id, uuid
	LastCommentID field.String // 上一条评论id, uuid
	Content       field.String // 评价内容
	SkuID         field.String

	fieldMap map[string]field.Expr
}

func (m merchantComment) Table(newTableName string) *merchantComment {
	m.merchantCommentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m merchantComment) As(alias string) *merchantComment {
	m.merchantCommentDo.DO = *(m.merchantCommentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *merchantComment) updateTableName(table string) *merchantComment {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.CreateAt = field.NewTime(table, "create_at")
	m.UpdateAt = field.NewTime(table, "update_at")
	m.Version = field.NewUint64(table, "version")
	m.MerchantID = field.NewInt64(table, "merchant_id")
	m.CommentID = field.NewString(table, "comment_id")
	m.LastCommentID = field.NewString(table, "last_comment_id")
	m.Content = field.NewString(table, "content")
	m.SkuID = field.NewString(table, "sku_id")

	m.fillFieldMap()

	return m
}

func (m *merchantComment) WithContext(ctx context.Context) IMerchantCommentDo {
	return m.merchantCommentDo.WithContext(ctx)
}

func (m merchantComment) TableName() string { return m.merchantCommentDo.TableName() }

func (m merchantComment) Alias() string { return m.merchantCommentDo.Alias() }

func (m merchantComment) Columns(cols ...field.Expr) gen.Columns {
	return m.merchantCommentDo.Columns(cols...)
}

func (m *merchantComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *merchantComment) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["create_at"] = m.CreateAt
	m.fieldMap["update_at"] = m.UpdateAt
	m.fieldMap["version"] = m.Version
	m.fieldMap["merchant_id"] = m.MerchantID
	m.fieldMap["comment_id"] = m.CommentID
	m.fieldMap["last_comment_id"] = m.LastCommentID
	m.fieldMap["content"] = m.Content
	m.fieldMap["sku_id"] = m.SkuID
}

func (m merchantComment) clone(db *gorm.DB) merchantComment {
	m.merchantCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m merchantComment) replaceDB(db *gorm.DB) merchantComment {
	m.merchantCommentDo.ReplaceDB(db)
	return m
}

type merchantCommentDo struct{ gen.DO }

type IMerchantCommentDo interface {
	gen.SubQuery
	Debug() IMerchantCommentDo
	WithContext(ctx context.Context) IMerchantCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMerchantCommentDo
	WriteDB() IMerchantCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMerchantCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMerchantCommentDo
	Not(conds ...gen.Condition) IMerchantCommentDo
	Or(conds ...gen.Condition) IMerchantCommentDo
	Select(conds ...field.Expr) IMerchantCommentDo
	Where(conds ...gen.Condition) IMerchantCommentDo
	Order(conds ...field.Expr) IMerchantCommentDo
	Distinct(cols ...field.Expr) IMerchantCommentDo
	Omit(cols ...field.Expr) IMerchantCommentDo
	Join(table schema.Tabler, on ...field.Expr) IMerchantCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMerchantCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMerchantCommentDo
	Group(cols ...field.Expr) IMerchantCommentDo
	Having(conds ...gen.Condition) IMerchantCommentDo
	Limit(limit int) IMerchantCommentDo
	Offset(offset int) IMerchantCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMerchantCommentDo
	Unscoped() IMerchantCommentDo
	Create(values ...*model.MerchantComment) error
	CreateInBatches(values []*model.MerchantComment, batchSize int) error
	Save(values ...*model.MerchantComment) error
	First() (*model.MerchantComment, error)
	Take() (*model.MerchantComment, error)
	Last() (*model.MerchantComment, error)
	Find() ([]*model.MerchantComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MerchantComment, err error)
	FindInBatches(result *[]*model.MerchantComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MerchantComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMerchantCommentDo
	Assign(attrs ...field.AssignExpr) IMerchantCommentDo
	Joins(fields ...field.RelationField) IMerchantCommentDo
	Preload(fields ...field.RelationField) IMerchantCommentDo
	FirstOrInit() (*model.MerchantComment, error)
	FirstOrCreate() (*model.MerchantComment, error)
	FindByPage(offset int, limit int) (result []*model.MerchantComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMerchantCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m merchantCommentDo) Debug() IMerchantCommentDo {
	return m.withDO(m.DO.Debug())
}

func (m merchantCommentDo) WithContext(ctx context.Context) IMerchantCommentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m merchantCommentDo) ReadDB() IMerchantCommentDo {
	return m.Clauses(dbresolver.Read)
}

func (m merchantCommentDo) WriteDB() IMerchantCommentDo {
	return m.Clauses(dbresolver.Write)
}

func (m merchantCommentDo) Session(config *gorm.Session) IMerchantCommentDo {
	return m.withDO(m.DO.Session(config))
}

func (m merchantCommentDo) Clauses(conds ...clause.Expression) IMerchantCommentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m merchantCommentDo) Returning(value interface{}, columns ...string) IMerchantCommentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m merchantCommentDo) Not(conds ...gen.Condition) IMerchantCommentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m merchantCommentDo) Or(conds ...gen.Condition) IMerchantCommentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m merchantCommentDo) Select(conds ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m merchantCommentDo) Where(conds ...gen.Condition) IMerchantCommentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m merchantCommentDo) Order(conds ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m merchantCommentDo) Distinct(cols ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m merchantCommentDo) Omit(cols ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m merchantCommentDo) Join(table schema.Tabler, on ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m merchantCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m merchantCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m merchantCommentDo) Group(cols ...field.Expr) IMerchantCommentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m merchantCommentDo) Having(conds ...gen.Condition) IMerchantCommentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m merchantCommentDo) Limit(limit int) IMerchantCommentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m merchantCommentDo) Offset(offset int) IMerchantCommentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m merchantCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMerchantCommentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m merchantCommentDo) Unscoped() IMerchantCommentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m merchantCommentDo) Create(values ...*model.MerchantComment) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m merchantCommentDo) CreateInBatches(values []*model.MerchantComment, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m merchantCommentDo) Save(values ...*model.MerchantComment) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m merchantCommentDo) First() (*model.MerchantComment, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantComment), nil
	}
}

func (m merchantCommentDo) Take() (*model.MerchantComment, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantComment), nil
	}
}

func (m merchantCommentDo) Last() (*model.MerchantComment, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantComment), nil
	}
}

func (m merchantCommentDo) Find() ([]*model.MerchantComment, error) {
	result, err := m.DO.Find()
	return result.([]*model.MerchantComment), err
}

func (m merchantCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MerchantComment, err error) {
	buf := make([]*model.MerchantComment, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m merchantCommentDo) FindInBatches(result *[]*model.MerchantComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m merchantCommentDo) Attrs(attrs ...field.AssignExpr) IMerchantCommentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m merchantCommentDo) Assign(attrs ...field.AssignExpr) IMerchantCommentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m merchantCommentDo) Joins(fields ...field.RelationField) IMerchantCommentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m merchantCommentDo) Preload(fields ...field.RelationField) IMerchantCommentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m merchantCommentDo) FirstOrInit() (*model.MerchantComment, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantComment), nil
	}
}

func (m merchantCommentDo) FirstOrCreate() (*model.MerchantComment, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantComment), nil
	}
}

func (m merchantCommentDo) FindByPage(offset int, limit int) (result []*model.MerchantComment, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m merchantCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m merchantCommentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m merchantCommentDo) Delete(models ...*model.MerchantComment) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *merchantCommentDo) withDO(do gen.Dao) *merchantCommentDo {
	m.DO = *do.(*gen.DO)
	return m
}
