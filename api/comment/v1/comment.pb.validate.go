// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/comment/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsRequestMultiError, or nil if none found.
func (m *GetCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuId

	if len(errors) > 0 {
		return GetCommentsRequestMultiError(errors)
	}

	return nil
}

// GetCommentsRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsRequestMultiError) AllErrors() []error { return m }

// GetCommentsRequestValidationError is the validation error returned by
// GetCommentsRequest.Validate if the designated constraints aren't met.
type GetCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsRequestValidationError) ErrorName() string {
	return "GetCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsRequestValidationError{}

// Validate checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsResponseMultiError, or nil if none found.
func (m *GetCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommentList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("CommentList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("CommentList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentsResponseValidationError{
					field:  fmt.Sprintf("CommentList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentsResponseMultiError(errors)
	}

	return nil
}

// GetCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsResponseMultiError) AllErrors() []error { return m }

// GetCommentsResponseValidationError is the validation error returned by
// GetCommentsResponse.Validate if the designated constraints aren't met.
type GetCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsResponseValidationError) ErrorName() string {
	return "GetCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsResponseValidationError{}

// Validate checks the field values on CommentRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentRequestMultiError,
// or nil if none found.
func (m *CommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConsumerId() <= 0 {
		err := CommentRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LastVersion

	// no validation rules for SkuId

	// no validation rules for CommentContent

	if len(errors) > 0 {
		return CommentRequestMultiError(errors)
	}

	return nil
}

// CommentRequestMultiError is an error wrapping multiple validation errors
// returned by CommentRequest.ValidateAll() if the designated constraints
// aren't met.
type CommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentRequestMultiError) AllErrors() []error { return m }

// CommentRequestValidationError is the validation error returned by
// CommentRequest.Validate if the designated constraints aren't met.
type CommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentRequestValidationError) ErrorName() string { return "CommentRequestValidationError" }

// Error satisfies the builtin error interface
func (e CommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentRequestValidationError{}

// Validate checks the field values on CommentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentResponseMultiError, or nil if none found.
func (m *CommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CommentResponseMultiError(errors)
	}

	return nil
}

// CommentResponseMultiError is an error wrapping multiple validation errors
// returned by CommentResponse.ValidateAll() if the designated constraints
// aren't met.
type CommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentResponseMultiError) AllErrors() []error { return m }

// CommentResponseValidationError is the validation error returned by
// CommentResponse.Validate if the designated constraints aren't met.
type CommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentResponseValidationError) ErrorName() string { return "CommentResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentResponseValidationError{}

// Validate checks the field values on ReplyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplyRequestMultiError, or
// nil if none found.
func (m *ReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConsumerId() <= 0 {
		err := ReplyRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SkuId

	// no validation rules for LastCommentId

	// no validation rules for ReplyContent

	// no validation rules for LastVersion

	if len(errors) > 0 {
		return ReplyRequestMultiError(errors)
	}

	return nil
}

// ReplyRequestMultiError is an error wrapping multiple validation errors
// returned by ReplyRequest.ValidateAll() if the designated constraints aren't met.
type ReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyRequestMultiError) AllErrors() []error { return m }

// ReplyRequestValidationError is the validation error returned by
// ReplyRequest.Validate if the designated constraints aren't met.
type ReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyRequestValidationError) ErrorName() string { return "ReplyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyRequestValidationError{}

// Validate checks the field values on ReplyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplyResponseMultiError, or
// nil if none found.
func (m *ReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ReplyResponseMultiError(errors)
	}

	return nil
}

// ReplyResponseMultiError is an error wrapping multiple validation errors
// returned by ReplyResponse.ValidateAll() if the designated constraints
// aren't met.
type ReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyResponseMultiError) AllErrors() []error { return m }

// ReplyResponseValidationError is the validation error returned by
// ReplyResponse.Validate if the designated constraints aren't met.
type ReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyResponseValidationError) ErrorName() string { return "ReplyResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyResponseValidationError{}

// Validate checks the field values on MerchantAddProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerchantAddProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerchantAddProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerchantAddProductRequestMultiError, or nil if none found.
func (m *MerchantAddProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MerchantAddProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MerchantAddProductRequestValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MerchantAddProductRequestValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerchantAddProductRequestValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MerchantAddProductRequestMultiError(errors)
	}

	return nil
}

// MerchantAddProductRequestMultiError is an error wrapping multiple validation
// errors returned by MerchantAddProductRequest.ValidateAll() if the
// designated constraints aren't met.
type MerchantAddProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerchantAddProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerchantAddProductRequestMultiError) AllErrors() []error { return m }

// MerchantAddProductRequestValidationError is the validation error returned by
// MerchantAddProductRequest.Validate if the designated constraints aren't met.
type MerchantAddProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantAddProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantAddProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantAddProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantAddProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantAddProductRequestValidationError) ErrorName() string {
	return "MerchantAddProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MerchantAddProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantAddProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantAddProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantAddProductRequestValidationError{}

// Validate checks the field values on MerchantAddProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerchantAddProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerchantAddProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerchantAddProductResponseMultiError, or nil if none found.
func (m *MerchantAddProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MerchantAddProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return MerchantAddProductResponseMultiError(errors)
	}

	return nil
}

// MerchantAddProductResponseMultiError is an error wrapping multiple
// validation errors returned by MerchantAddProductResponse.ValidateAll() if
// the designated constraints aren't met.
type MerchantAddProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerchantAddProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerchantAddProductResponseMultiError) AllErrors() []error { return m }

// MerchantAddProductResponseValidationError is the validation error returned
// by MerchantAddProductResponse.Validate if the designated constraints aren't met.
type MerchantAddProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantAddProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantAddProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantAddProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantAddProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantAddProductResponseValidationError) ErrorName() string {
	return "MerchantAddProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MerchantAddProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantAddProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantAddProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantAddProductResponseValidationError{}

// Validate checks the field values on MerchantReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerchantReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerchantReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerchantReplyRequestMultiError, or nil if none found.
func (m *MerchantReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MerchantReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for SkuId

	// no validation rules for LastCommentId

	// no validation rules for ReplyContent

	// no validation rules for LastVersion

	if len(errors) > 0 {
		return MerchantReplyRequestMultiError(errors)
	}

	return nil
}

// MerchantReplyRequestMultiError is an error wrapping multiple validation
// errors returned by MerchantReplyRequest.ValidateAll() if the designated
// constraints aren't met.
type MerchantReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerchantReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerchantReplyRequestMultiError) AllErrors() []error { return m }

// MerchantReplyRequestValidationError is the validation error returned by
// MerchantReplyRequest.Validate if the designated constraints aren't met.
type MerchantReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantReplyRequestValidationError) ErrorName() string {
	return "MerchantReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MerchantReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantReplyRequestValidationError{}

// Validate checks the field values on MerchantReplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MerchantReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MerchantReplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MerchantReplyResponseMultiError, or nil if none found.
func (m *MerchantReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MerchantReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return MerchantReplyResponseMultiError(errors)
	}

	return nil
}

// MerchantReplyResponseMultiError is an error wrapping multiple validation
// errors returned by MerchantReplyResponse.ValidateAll() if the designated
// constraints aren't met.
type MerchantReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerchantReplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerchantReplyResponseMultiError) AllErrors() []error { return m }

// MerchantReplyResponseValidationError is the validation error returned by
// MerchantReplyResponse.Validate if the designated constraints aren't met.
type MerchantReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantReplyResponseValidationError) ErrorName() string {
	return "MerchantReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MerchantReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchantReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantReplyResponseValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for ConsumerId

	// no validation rules for CommentContent

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuId

	// no validation rules for Title

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}
